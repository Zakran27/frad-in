import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

const openaiApiKey = process.env.OPENAI_API_KEY;

const prompts = [
  "√âcris une seule punchline de rap fran√ßais, crue, originale et percutante. Une ligne. Pas de guillemets, pas d‚Äôintro. Ne sois pas po√©tique, sois r√©el, provocateur, brut ou dr√¥le. Utilise du langage parl√© ou familier si n√©cessaire. Aucun filtre.",
  "G√©n√®re une punchline de rap fran√ßais comme si c‚Äô√©tait Booba, Alpha Wann ou Freeze Corleone. Pas de guillemets. Une ligne, s√®che, egotrip ou mena√ßante. Pas de fluff, pas d‚Äôexplication.",
  "Fais une punchline de rap fran√ßais √† l‚Äôancienne, sombre ou absurde, mais percutante. Pas de guillemets. Pas d‚Äôintro, une ligne brute, comme si c‚Äô√©tait un freestyle.",
  "Invente une punchline de rap FR qui pourrait choquer ou faire rire. Pas de m√©taphores chiantes. Pas de guillemets. Une ligne, directe, efficace, que des vrais ressentent.",
];

export async function GET() {
  const isFake = Math.random() < 0.5;

  // üî• Real punchline via Supabase RPC
  if (!isFake) {
    const { data, error } = await supabase.rpc("get_random_punchline");

    if (error) {
      console.error("Supabase RPC error:", error.message);
      return new Response(JSON.stringify({ error: "Supabase failed" }), {
        status: 500,
        headers: { "Content-Type": "application/json" },
      });
    }

    if (!data?.length) {
      console.warn("No punchlines returned.");
      return new Response(JSON.stringify({ error: "No data" }), {
        status: 404,
        headers: { "Content-Type": "application/json" },
      });
    }

    const real = data[0];
    return new Response(
      JSON.stringify({
        text: real.text,
        isReal: true,
        artist: real.artist,
        title: real.title,
        source: real.source,
      }),
      { headers: { "Content-Type": "application/json" } }
    );
  }

  // ü§ñ Fake punchline via OpenAI
  const prompt = prompts[Math.floor(Math.random() * prompts.length)];

  try {
    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${openaiApiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [{ role: "user", content: prompt }],
        temperature: 1.2,
        top_p: 1,
        frequency_penalty: 0.2,
        presence_penalty: 0.6,
        max_tokens: 60,
      }),
    });

    const data = await res.json();

    const text = data.choices?.[0]?.message?.content?.trim();

    if (!text) {
      console.error("‚ùå Invalid OpenAI result:", JSON.stringify(data, null, 2));
      return new Response(
        JSON.stringify({
          text: "ü§ñ AI punchline failed to load.",
          isReal: false,
        }),
        { headers: { "Content-Type": "application/json" } }
      );
    }

    return new Response(
      JSON.stringify({
        text,
        isReal: false,
      }),
      { headers: { "Content-Type": "application/json" } }
    );
  } catch (err) {
    console.error("‚ùå OpenAI request failed:", err);
    return new Response(
      JSON.stringify({
        text: "ü§ñ OpenAI request error.",
        isReal: false,
      }),
      { headers: { "Content-Type": "application/json" } }
    );
  }
}
